#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
# from niworkflows.interface.surf import GiftiToCSV, CSVToGifti
from os.path import join
import os
import pandas as pd 

configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"]
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

rule all:
    input: 
        expand(bids(
            root = "results",
            datatype = "func",
            hemi = "{hemi}",
            space = "MNI152NLin2009cAsym",
            den = "{density}",
            suffix = "bold.func.gii",
            **config["input_wildcards"]['reverse_transform']),
            density=config['density'],
            hemi = config['hemi'],
            **config['input_lists']['reverse_transform']),

        # expand(bids(
        #     root = "work",
        #     suffix = "aggregate.done",
        #     **config["input_wildcards"]['reverse_transform']
        # ), **config['input_lists']['reverse_transform']),

        expand(bids(
            root = "results",
            datatype = "func",
            hemi = "{hemi}",
            space = "MNI152NLin2009cAsym",
            density = "{density}",
            desc = "aligned",
            suffix = "gradients.func.gii",
            **config["input_wildcards"]['reverse_transform']), 
        density=config['density'],
        hemi = config['hemi'],
        **config['input_lists']['reverse_transform']),
        #  bids(
        #     root = "work",
        #     prefix = "group",
        #     suffix = "complete.tsv"),

# subject_list = sorted(pd.read_csv(join(config['bids_dir'],'participants.tsv'),sep='\t')['participant_id'].to_list())

# include: 'rules/xcp_engine.smk'

include: 'rules/post_hippunfold.smk'

include: 'rules/post_fmriprep_xcpengine.smk'


