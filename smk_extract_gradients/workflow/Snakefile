#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from os.path import join
import os
import pandas as pd 
import numpy as np
import shutil
from bids import BIDSLayout
from operator import itemgetter
from glob import glob
from scripts.utilities import gifti2csv, csv2gifti, fmri_path_cohort

configfile: 'config/snakebids.yml'


pybids_fmriprep = { k:v for k,v in config['pybids_inputs'].items() if k in ['bold_volume','reverse_transform']}
# pybids_hippunfold = { k:v for k,v in config['pybids_inputs'].items() if k == 'surf'}
# pybids_hippunfold['surf']['filters']['space'] = config['hippunfold_space']

if config['fmriprep_dir'] != None:
    config.update(
        snakebids.generate_inputs(
            bids_dir=config["bids_dir"],
            pybids_inputs=pybids_fmriprep,
            derivatives=config['fmriprep_dir'],
            participant_label=config["participant_label"],
            exclude_participant_label=config["exclude_participant_label"]
        )
    )

else:
    config.update(
        snakebids.generate_inputs(
            bids_dir=config['bids_dir'],
            pybids_inputs=pybids_fmriprep,
            derivatives=config["derivatives"],
            participant_label=config["participant_label"],
            exclude_participant_label=config["exclude_participant_label"]
        )
    )

# config.update(
#     snakebids.generate_inputs(
#         bids_dir=config['bids_dir'],
#         pybids_inputs=pybids_hippunfold,
#         derivatives=join(config['hippunfold_dir'],'results') if 'results' not in config['hippunfold_dir'] else config['hippunfold_dir'],
#         participant_label=config["participant_label"],
#         exclude_participant_label=config["exclude_participant_label"]
#     )
# )

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------

config['input_lists']['bold_volume']['task'] = config['task']


# defining wildcards variables
subj_wildcards = config["subj_wildcards"]
fmri_wildcards = config['input_wildcards']['bold_volume']
transform_wildcards = config['input_wildcards']['reverse_transform']

# defining image specific wildcard input list variables
fmri_input_list = config['input_lists']['bold_volume']
transform_input_list = config['input_lists']['reverse_transform']

# defining variables for image zip lists
bold_zip = config['input_zip_lists']['bold_volume']

subjects_bold = bold_zip['subject']
task_bold = bold_zip['task']

subj_list2set = lambda subj_list: set(subj_list) if len(subj_list)>1 else {subj_list[0]}

bold_sub_task_getter = itemgetter(*[ idx for idx, task in enumerate(task_bold) if config['task'] == task])
subjects_bold = bold_sub_task_getter(subjects_bold)
subjects_bold = [subjects_bold] if type(subjects_bold) == str else subjects_bold 
subjects_bold = list(subj_list2set(subjects_bold))

def match_getter(match, match_list, item_list):
    idx_list  = [ idx for idx, item in enumerate(match_list) if match == item ]
    getter = itemgetter(*idx_list)
    return list(getter(item_list))

fmri_img_dict = {}

if 'run' in bold_zip.keys():
    runs_bold = bold_zip['run']
    runs_bold = bold_sub_task_getter(runs_bold)

    bold_run_dict_list = []

    for sub_bold in subjects_bold:
        run_match = match_getter(sub_bold,subjects_bold,runs_bold)
        run_match_array = np.array(run_match).astype(np.int8)

        if run_match_array.size != 1:
            sub_run_dict =  {sub_bold:int(run_match[np.argmax(run_match_array)])}
        else:
            sub_run_dict = {sub_bold:int(run_match_array[0])} 

        bold_run_dict_list.append(sub_run_dict)

    bold_sub_run = {}
    for sub_dict in bold_run_dict_list:
        bold_sub_run.update(sub_dict)
    
    for sub_idx, sub in enumerate(subjects_bold):
        fmri_img_dict[sub] = config['input_path']['bold_volume'].format(subject=sub, task=config['task'], run = bold_sub_run[sub])

else:
    for sub_idx, sub in enumerate(subjects_bold):
        fmri_img_dict[sub] = config['input_path']['bold_volume'].format(subject=sub, task=config['task'])

#checks hippunfold and grabs only subjects with output that exisits
hippunfold_dir = os.path.abspath(config['hippunfold_dir'])
hippunfold_dir = join(hippunfold_dir,'results/') if 'results' not in hippunfold_dir else hippunfold_dir

hippunfold_subjects = [ subj_dir.strip('sub-') for subj_dir in os.listdir(hippunfold_dir) if 'sub' in subj_dir ]

hippunfold_paths = [glob(join(hippunfold_dir,"sub-{subject}/surf_T1w/sub-{subject}_hemi-*_space-T1w_den-{density}_midthickness.surf.gii".format(subject=subj, density=config['density']))) for subj in hippunfold_subjects]

# initializing list of indicies and paths
hippunfold_input_list = [[], []]

for idx, hippopath in enumerate(hippunfold_paths):
    if hippopath != None:
        hippunfold_input_list[0].append(idx), hippunfold_input_list[1].append(hippopath[0].replace('hemi-L','hemi-{hemi}').replace('hemi-R','hemi-{hemi}'))
    else:
        continue


getter = itemgetter(*hippunfold_input_list[0])
hippunfold_subjects = getter(hippunfold_subjects)
hippunfold_subj_set = set(hippunfold_subjects)

hippunfold_surf_list = dict(zip(hippunfold_subjects , hippunfold_input_list[1]))

# getting available subject list and fixing available subjects to pybids input lists
subjects = list(fmri_img_dict.keys())

# using sets to obtain subjects with existing transforms and bold images
transform_subj_set = subj_list2set(transform_input_list['subject'])
subj_set = subj_list2set(subjects)
fmri_subj_set = subj_list2set(fmri_input_list['subject'])

subjects = transform_subj_set.intersection(subj_set)
subjects = subjects.intersection(fmri_subj_set)
subjects = list(subjects.intersection(hippunfold_subj_set))

transform_input_list['subject'] = subjects
fmri_input_list['subject'] = subjects

rule all:
    input: 
        expand(bids(
            root = "work",
            datatype = "func",
            task = '{task}',
            suffix = "fmriclean.done",
            **transform_wildcards),
            task = config['task'],
            **transform_input_list
            ),
        expand(bids(
            root = 'results',
            datatype = 'func',
            task =  '{task}',
            desc =  'cleaned',
            suffix =  'bold.nii.gz',
            **transform_wildcards),
            task = config['task'],
            **transform_input_list
            ),
        expand(bids(
            root = "results",
            datatype = "func",
            task = '{task}',
            hemi = "{hemi}",
            space = "MNI152NLin2009cAsym",
            den = "{density}",
            suffix = "bold.func.gii",
            **transform_wildcards),
            task = config['task'],
            density=config['density'],
            hemi = config['hemi'],
            **transform_input_list
            ),
        expand(bids(
            root = "results",
            datatype = "func",
            task =  '{task}',
            hemi = "{hemi}",
            space = "MNI152NLin2009cAsym",
            den = "{density}",
            desc = "aligned",
            suffix = "gradients.func.gii",
            **transform_wildcards),
            task = config['task'], 
            density=config['density'],
            hemi = config['hemi'],
            **transform_input_list
            ),
        expand(bids(
            root = "work",
            datatype = "func",
            task =  '{task}',
            hemi = "{hemi}",
            den = "{density}",
            suffix = "func.done",
            **transform_wildcards),
            task = config['task'], 
            density=config['density'],
            hemi = config['hemi'],
            **transform_input_list
            ),
        expand(bids(
            root = "work",
            datatype = "func",
            prefix = "sub-avg",
            task =  '{task}',
            hemi = "{hemi}",
            den = "{density}",
            suffix = "func.done"),
            task = config['task'], 
            density=config['density'],
            hemi = config['hemi'],
            )

include: 'rules/xcpengine.smk'

include: 'rules/post_hippunfold.smk'

include: 'rules/post_fmriclean.smk'

